
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+2406 (git sha1 534be66, gcc 7.5.0-3ubuntu1~18.04 -fPIC -Os)


-- Executing script file `tmp/9ae6e1d1cddb427aa49e74bc8229f15d.ys' --

1. Executing Verilog-2005 frontend: tmp/9ae6e1d1cddb427aa49e74bc8229f15d.v
Parsing SystemVerilog input from `tmp/9ae6e1d1cddb427aa49e74bc8229f15d.v' to AST representation.
Storing AST representation for module `$abstract\alu_adderandlogic'.
Successfully finished Verilog frontend.

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\alu_adderandlogic'.
Generating RTLIL representation for module `\alu_adderandlogic'.

2.2.1. Analyzing design hierarchy..
Top module:  \alu_adderandlogic

2.2.2. Analyzing design hierarchy..
Top module:  \alu_adderandlogic
Removing unused module `$abstract\alu_adderandlogic'.
Removed 1 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

2.3.4. Executing PROC_INIT pass (extract init attributes).

2.3.5. Executing PROC_ARST pass (detect async resets in processes).

2.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

2.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

2.3.8. Executing PROC_DFF pass (convert process syncs to FFs).

2.3.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu_adderandlogic.

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu_adderandlogic..
Removed 0 unused cells and 12 unused wires.
<suppressed ~2 debug messages>

2.6. Executing CHECK pass (checking for obvious problems).
checking module alu_adderandlogic..
found and reported 0 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu_adderandlogic.

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu_adderandlogic'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu_adderandlogic..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu_adderandlogic.
Performed a total of 0 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu_adderandlogic'.
Removed a total of 0 cells.

2.7.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu_adderandlogic..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

2.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu_adderandlogic.

2.7.9. Rerunning OPT passes. (Maybe there is more to do..)

2.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu_adderandlogic..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu_adderandlogic.
Performed a total of 0 changes.

2.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu_adderandlogic'.
Removed a total of 0 cells.

2.7.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu_adderandlogic..

2.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu_adderandlogic.

2.7.16. Finished OPT passes. (There is nothing left to do.)

2.8. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 32) from port Y of cell alu_adderandlogic.$and$tmp/9ae6e1d1cddb427aa49e74bc8229f15d.v:56$25 ($and).
Removed top 1 bits (of 32) from port B of cell alu_adderandlogic.$and$tmp/9ae6e1d1cddb427aa49e74bc8229f15d.v:56$25 ($and).
Removed top 31 bits (of 32) from port A of cell alu_adderandlogic.$not$tmp/9ae6e1d1cddb427aa49e74bc8229f15d.v:58$29 ($not).
Removed top 31 bits (of 32) from port Y of cell alu_adderandlogic.$and$tmp/9ae6e1d1cddb427aa49e74bc8229f15d.v:58$31 ($and).
Removed top 31 bits (of 32) from port B of cell alu_adderandlogic.$or$tmp/9ae6e1d1cddb427aa49e74bc8229f15d.v:58$32 ($or).
Removed top 31 bits (of 32) from port Y of cell alu_adderandlogic.$or$tmp/9ae6e1d1cddb427aa49e74bc8229f15d.v:58$34 ($or).
Removed top 31 bits (of 32) from port A of cell alu_adderandlogic.$or$tmp/9ae6e1d1cddb427aa49e74bc8229f15d.v:58$34 ($or).
Removed top 31 bits (of 32) from port B of cell alu_adderandlogic.$or$tmp/9ae6e1d1cddb427aa49e74bc8229f15d.v:58$34 ($or).
Removed top 31 bits (of 32) from port Y of cell alu_adderandlogic.$and$tmp/9ae6e1d1cddb427aa49e74bc8229f15d.v:58$27 ($and).
Removed top 31 bits (of 32) from port B of cell alu_adderandlogic.$and$tmp/9ae6e1d1cddb427aa49e74bc8229f15d.v:58$27 ($and).
Removed top 31 bits (of 32) from port Y of cell alu_adderandlogic.$and$tmp/9ae6e1d1cddb427aa49e74bc8229f15d.v:58$33 ($and).
Removed top 31 bits (of 32) from port A of cell alu_adderandlogic.$and$tmp/9ae6e1d1cddb427aa49e74bc8229f15d.v:58$33 ($and).
Removed top 31 bits (of 32) from port B of cell alu_adderandlogic.$and$tmp/9ae6e1d1cddb427aa49e74bc8229f15d.v:58$33 ($and).
Removed top 31 bits (of 32) from port Y of cell alu_adderandlogic.$or$tmp/9ae6e1d1cddb427aa49e74bc8229f15d.v:58$32 ($or).
Removed top 31 bits (of 32) from port A of cell alu_adderandlogic.$or$tmp/9ae6e1d1cddb427aa49e74bc8229f15d.v:58$32 ($or).
Removed top 31 bits (of 32) from port Y of cell alu_adderandlogic.$and$tmp/9ae6e1d1cddb427aa49e74bc8229f15d.v:58$30 ($and).
Removed top 31 bits (of 32) from port B of cell alu_adderandlogic.$and$tmp/9ae6e1d1cddb427aa49e74bc8229f15d.v:58$30 ($and).
Removed top 31 bits (of 32) from port Y of cell alu_adderandlogic.$not$tmp/9ae6e1d1cddb427aa49e74bc8229f15d.v:58$29 ($not).
Removed top 1 bits (of 32) from wire alu_adderandlogic.$and$tmp/9ae6e1d1cddb427aa49e74bc8229f15d.v:56$25_Y.
Removed top 31 bits (of 32) from wire alu_adderandlogic.$and$tmp/9ae6e1d1cddb427aa49e74bc8229f15d.v:58$27_Y.
Removed top 31 bits (of 32) from wire alu_adderandlogic.$and$tmp/9ae6e1d1cddb427aa49e74bc8229f15d.v:58$30_Y.
Removed top 31 bits (of 32) from wire alu_adderandlogic.$and$tmp/9ae6e1d1cddb427aa49e74bc8229f15d.v:58$31_Y.
Removed top 31 bits (of 32) from wire alu_adderandlogic.$and$tmp/9ae6e1d1cddb427aa49e74bc8229f15d.v:58$33_Y.
Removed top 31 bits (of 32) from wire alu_adderandlogic.$or$tmp/9ae6e1d1cddb427aa49e74bc8229f15d.v:58$34_Y.

2.9. Executing PEEPOPT pass (run peephole optimizers).

2.10. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu_adderandlogic..
Removed 0 unused cells and 8 unused wires.
<suppressed ~1 debug messages>

2.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module alu_adderandlogic:
  creating $macc model for $add$tmp/9ae6e1d1cddb427aa49e74bc8229f15d.v:44$7 ($add).
  creating $macc model for $add$tmp/9ae6e1d1cddb427aa49e74bc8229f15d.v:44$8 ($add).
  merging $macc model for $add$tmp/9ae6e1d1cddb427aa49e74bc8229f15d.v:44$7 into $add$tmp/9ae6e1d1cddb427aa49e74bc8229f15d.v:44$8.
  creating $alu model for $macc $add$tmp/9ae6e1d1cddb427aa49e74bc8229f15d.v:44$8.
  creating $alu cell for $add$tmp/9ae6e1d1cddb427aa49e74bc8229f15d.v:44$8: $auto$alumacc.cc:485:replace_alu$42
  created 1 $alu and 0 $macc cells.

2.12. Executing SHARE pass (SAT-based resource sharing).

2.13. Executing OPT pass (performing simple optimizations).

2.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu_adderandlogic.

2.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu_adderandlogic'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu_adderandlogic..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu_adderandlogic.
Performed a total of 0 changes.

2.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu_adderandlogic'.
Removed a total of 0 cells.

2.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu_adderandlogic..
Removed 1 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

2.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu_adderandlogic.

2.13.9. Rerunning OPT passes. (Maybe there is more to do..)

2.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu_adderandlogic..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu_adderandlogic.
Performed a total of 0 changes.

2.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu_adderandlogic'.
Removed a total of 0 cells.

2.13.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu_adderandlogic..

2.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu_adderandlogic.

2.13.16. Finished OPT passes. (There is nothing left to do.)

2.14. Executing FSM pass (extract and optimize FSM).

2.14.1. Executing FSM_DETECT pass (finding FSMs in design).

2.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu_adderandlogic..

2.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.15. Executing OPT pass (performing simple optimizations).

2.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu_adderandlogic.

2.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu_adderandlogic'.
Removed a total of 0 cells.

2.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu_adderandlogic..

2.15.5. Finished fast OPT passes.

2.16. Executing MEMORY pass.

2.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.16.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.16.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu_adderandlogic..

2.16.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.16.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu_adderandlogic..

2.16.6. Executing MEMORY_COLLECT pass (generating $mem cells).

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu_adderandlogic..

2.18. Executing OPT pass (performing simple optimizations).

2.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu_adderandlogic.

2.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu_adderandlogic'.
Removed a total of 0 cells.

2.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu_adderandlogic..

2.18.5. Finished fast OPT passes.

2.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.20. Executing OPT pass (performing simple optimizations).

2.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu_adderandlogic.

2.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu_adderandlogic'.
Removed a total of 0 cells.

2.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu_adderandlogic..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu_adderandlogic.
Performed a total of 0 changes.

2.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu_adderandlogic'.
Removed a total of 0 cells.

2.20.6. Executing OPT_SHARE pass.

2.20.7. Executing OPT_RMDFF pass (remove dff with constant values).

2.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu_adderandlogic..

2.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu_adderandlogic.

2.20.10. Finished OPT passes. (There is nothing left to do.)

2.21. Executing TECHMAP pass (map to technology primitives).

2.21.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=33\B_WIDTH=33\Y_WIDTH=33 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=33 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $mux.
No more expansions possible.
<suppressed ~324 debug messages>

2.22. Executing OPT pass (performing simple optimizations).

2.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu_adderandlogic.
<suppressed ~35 debug messages>

2.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu_adderandlogic'.
Removed a total of 0 cells.

2.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu_adderandlogic..
Removed 35 unused cells and 25 unused wires.
<suppressed ~36 debug messages>

2.22.5. Finished fast OPT passes.

2.23. Executing ABC pass (technology mapping using ABC).

2.23.1. Extracting gate netlist of module `\alu_adderandlogic' to `<abc-temp-dir>/input.blif'..
Extracted 733 gates and 802 wires to a netlist network with 69 inputs and 32 outputs.

2.23.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:            ANDNOT cells:      138
ABC RESULTS:               MUX cells:       99
ABC RESULTS:              NAND cells:       32
ABC RESULTS:               NOR cells:       54
ABC RESULTS:               NOT cells:       30
ABC RESULTS:                OR cells:       44
ABC RESULTS:             ORNOT cells:       30
ABC RESULTS:              XNOR cells:       34
ABC RESULTS:               XOR cells:       95
ABC RESULTS:        internal signals:      701
ABC RESULTS:           input signals:       69
ABC RESULTS:          output signals:       32
Removing temp directory.

2.24. Executing OPT pass (performing simple optimizations).

2.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu_adderandlogic.
<suppressed ~97 debug messages>

2.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu_adderandlogic'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu_adderandlogic..
Removed 3 unused cells and 245 unused wires.
<suppressed ~15 debug messages>

2.24.5. Finished fast OPT passes.

2.25. Executing HIERARCHY pass (managing design hierarchy).

2.25.1. Analyzing design hierarchy..
Top module:  \alu_adderandlogic

2.25.2. Analyzing design hierarchy..
Top module:  \alu_adderandlogic
Removed 0 unused modules.

2.26. Printing statistics.

=== alu_adderandlogic ===

   Number of wires:                527
   Number of wire bits:            623
   Number of public wires:           5
   Number of public wire bits:     101
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                554
     $_ANDNOT_                     138
     $_AND_                          2
     $_MUX_                         99
     $_NAND_                        32
     $_NOR_                         54
     $_NOT_                         27
     $_ORNOT_                       30
     $_OR_                          44
     $_XNOR_                        33
     $_XOR_                         95

2.27. Executing CHECK pass (checking for obvious problems).
checking module alu_adderandlogic..
found and reported 0 problems.

3. Generating Graphviz representation of design.
