
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+2406 (git sha1 534be66, gcc 7.5.0-3ubuntu1~18.04 -fPIC -Os)


-- Executing script file `tmp/8b73af67ddef403eaaada70004f60191.ys' --

1. Executing Verilog-2005 frontend: tmp/8b73af67ddef403eaaada70004f60191.v
Parsing SystemVerilog input from `tmp/8b73af67ddef403eaaada70004f60191.v' to AST representation.
Storing AST representation for module `$abstract\top_module'.
Successfully finished Verilog frontend.

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\top_module'.
Generating RTLIL representation for module `\top_module'.

2.2.1. Analyzing design hierarchy..
Top module:  \top_module

2.2.2. Analyzing design hierarchy..
Top module:  \top_module
Removing unused module `$abstract\top_module'.
Removed 1 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$tmp/8b73af67ddef403eaaada70004f60191.v:11$1 in module top_module.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 1 assignment to connection.

2.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\top_module.$proc$tmp/8b73af67ddef403eaaada70004f60191.v:9$2'.
  Set init value: \flag = 1'1

2.3.5. Executing PROC_ARST pass (detect async resets in processes).

2.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\top_module.$proc$tmp/8b73af67ddef403eaaada70004f60191.v:9$2'.
Creating decoders for process `\top_module.$proc$tmp/8b73af67ddef403eaaada70004f60191.v:11$1'.
     1/1: $0\flag[0:0]

2.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

2.3.8. Executing PROC_DFF pass (convert process syncs to FFs).
